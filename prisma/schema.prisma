// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  date      DateTime
  imageUrl  String
  time      String
  location  String
  speakers  SpeakerOnEvent[] // Relationship through the join table
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Speaker {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  events SpeakerOnEvent[] // Relationship through the join table
}

model SpeakerOnEvent {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String  @db.ObjectId
  speakerId String  @db.ObjectId
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker   Speaker @relation(fields: [speakerId], references: [id], onDelete: Cascade)

  @@unique([eventId, speakerId]) // Unique constraint for many-to-many
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  summary   String
  content   String
  author    String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
